// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mortgage.Domain.Infrastructure;

namespace Mortgage.Domain.Infrastructure.Migrations
{
    [DbContext(typeof(MortgageDbContext))]
    partial class MortgageDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846");

            modelBuilder.Entity("Mortgage.Domain.Lenders.Country", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new { Id = "Afghanistan", Code = "AF" },
                        new { Id = "Åland Islands", Code = "AX" },
                        new { Id = "Albania", Code = "AL" },
                        new { Id = "Algeria", Code = "DZ" },
                        new { Id = "American Samoa", Code = "AS" },
                        new { Id = "AndorrA", Code = "AD" },
                        new { Id = "Angola", Code = "AO" },
                        new { Id = "Anguilla", Code = "AI" },
                        new { Id = "Antarctica", Code = "AQ" },
                        new { Id = "Antigua and Barbuda", Code = "AG" },
                        new { Id = "Argentina", Code = "AR" },
                        new { Id = "Armenia", Code = "AM" },
                        new { Id = "Aruba", Code = "AW" },
                        new { Id = "Australia", Code = "AU" },
                        new { Id = "Austria", Code = "AT" },
                        new { Id = "Azerbaijan", Code = "AZ" },
                        new { Id = "Bahamas", Code = "BS" },
                        new { Id = "Bahrain", Code = "BH" },
                        new { Id = "Bangladesh", Code = "BD" },
                        new { Id = "Barbados", Code = "BB" },
                        new { Id = "Belarus", Code = "BY" },
                        new { Id = "Belgium", Code = "BE" },
                        new { Id = "Belize", Code = "BZ" },
                        new { Id = "Benin", Code = "BJ" },
                        new { Id = "Bermuda", Code = "BM" },
                        new { Id = "Bhutan", Code = "BT" },
                        new { Id = "Bolivia", Code = "BO" },
                        new { Id = "Bosnia and Herzegovina", Code = "BA" },
                        new { Id = "Botswana", Code = "BW" },
                        new { Id = "Bouvet Island", Code = "BV" },
                        new { Id = "Brazil", Code = "BR" },
                        new { Id = "British Indian Ocean Territory", Code = "IO" },
                        new { Id = "Brunei Darussalam", Code = "BN" },
                        new { Id = "Bulgaria", Code = "BG" },
                        new { Id = "Burkina Faso", Code = "BF" },
                        new { Id = "Burundi", Code = "BI" },
                        new { Id = "Cambodia", Code = "KH" },
                        new { Id = "Cameroon", Code = "CM" },
                        new { Id = "Canada", Code = "CA" },
                        new { Id = "Cape Verde", Code = "CV" },
                        new { Id = "Cayman Islands", Code = "KY" },
                        new { Id = "Central African Republic", Code = "CF" },
                        new { Id = "Chad", Code = "TD" },
                        new { Id = "Chile", Code = "CL" },
                        new { Id = "China", Code = "CN" },
                        new { Id = "Christmas Island", Code = "CX" },
                        new { Id = "Cocos (Keeling) Islands", Code = "CC" },
                        new { Id = "Colombia", Code = "CO" },
                        new { Id = "Comoros", Code = "KM" },
                        new { Id = "Congo", Code = "CG" },
                        new { Id = "Congo, The Democratic Republic of the", Code = "CD" },
                        new { Id = "Cook Islands", Code = "CK" },
                        new { Id = "Costa Rica", Code = "CR" },
                        new { Id = "Cote D'Ivoire", Code = "CI" },
                        new { Id = "Croatia", Code = "HR" },
                        new { Id = "Cuba", Code = "CU" },
                        new { Id = "Cyprus", Code = "CY" },
                        new { Id = "Czech Republic", Code = "CZ" },
                        new { Id = "Denmark", Code = "DK" },
                        new { Id = "Djibouti", Code = "DJ" },
                        new { Id = "Dominica", Code = "DM" },
                        new { Id = "Dominican Republic", Code = "DO" },
                        new { Id = "Ecuador", Code = "EC" },
                        new { Id = "Egypt", Code = "EG" },
                        new { Id = "El Salvador", Code = "SV" },
                        new { Id = "Equatorial Guinea", Code = "GQ" },
                        new { Id = "Eritrea", Code = "ER" },
                        new { Id = "Estonia", Code = "EE" },
                        new { Id = "Ethiopia", Code = "ET" },
                        new { Id = "Falkland Islands (Malvinas)", Code = "FK" },
                        new { Id = "Faroe Islands", Code = "FO" },
                        new { Id = "Fiji", Code = "FJ" },
                        new { Id = "Finland", Code = "FI" },
                        new { Id = "France", Code = "FR" },
                        new { Id = "French Guiana", Code = "GF" },
                        new { Id = "French Polynesia", Code = "PF" },
                        new { Id = "French Southern Territories", Code = "TF" },
                        new { Id = "Gabon", Code = "GA" },
                        new { Id = "Gambia", Code = "GM" },
                        new { Id = "Georgia", Code = "GE" },
                        new { Id = "Germany", Code = "DE" },
                        new { Id = "Ghana", Code = "GH" },
                        new { Id = "Gibraltar", Code = "GI" },
                        new { Id = "Greece", Code = "GR" },
                        new { Id = "Greenland", Code = "GL" },
                        new { Id = "Grenada", Code = "GD" },
                        new { Id = "Guadeloupe", Code = "GP" },
                        new { Id = "Guam", Code = "GU" },
                        new { Id = "Guatemala", Code = "GT" },
                        new { Id = "Guernsey", Code = "GG" },
                        new { Id = "Guinea", Code = "GN" },
                        new { Id = "Guinea-Bissau", Code = "GW" },
                        new { Id = "Guyana", Code = "GY" },
                        new { Id = "Haiti", Code = "HT" },
                        new { Id = "Heard Island and Mcdonald Islands", Code = "HM" },
                        new { Id = "Holy See (Vatican City State)", Code = "VA" },
                        new { Id = "Honduras", Code = "HN" },
                        new { Id = "Hong Kong", Code = "HK" },
                        new { Id = "Hungary", Code = "HU" },
                        new { Id = "Iceland", Code = "IS" },
                        new { Id = "India", Code = "IN" },
                        new { Id = "Indonesia", Code = "ID" },
                        new { Id = "Iran, Islamic Republic Of", Code = "IR" },
                        new { Id = "Iraq", Code = "IQ" },
                        new { Id = "Ireland", Code = "IE" },
                        new { Id = "Isle of Man", Code = "IM" },
                        new { Id = "Israel", Code = "IL" },
                        new { Id = "Italy", Code = "IT" },
                        new { Id = "Jamaica", Code = "JM" },
                        new { Id = "Japan", Code = "JP" },
                        new { Id = "Jersey", Code = "JE" },
                        new { Id = "Jordan", Code = "JO" },
                        new { Id = "Kazakhstan", Code = "KZ" },
                        new { Id = "Kenya", Code = "KE" },
                        new { Id = "Kiribati", Code = "KI" },
                        new { Id = "Korea, Democratic People'S Republic of", Code = "KP" },
                        new { Id = "Korea, Republic of", Code = "KR" },
                        new { Id = "Kuwait", Code = "KW" },
                        new { Id = "Kyrgyzstan", Code = "KG" },
                        new { Id = "Lao People'S Democratic Republic", Code = "LA" },
                        new { Id = "Latvia", Code = "LV" },
                        new { Id = "Lebanon", Code = "LB" },
                        new { Id = "Lesotho", Code = "LS" },
                        new { Id = "Liberia", Code = "LR" },
                        new { Id = "Libyan Arab Jamahiriya", Code = "LY" },
                        new { Id = "Liechtenstein", Code = "LI" },
                        new { Id = "Lithuania", Code = "LT" },
                        new { Id = "Luxembourg", Code = "LU" },
                        new { Id = "Macao", Code = "MO" },
                        new { Id = "Macedonia, The Former Yugoslav Republic of", Code = "MK" },
                        new { Id = "Madagascar", Code = "MG" },
                        new { Id = "Malawi", Code = "MW" },
                        new { Id = "Malaysia", Code = "MY" },
                        new { Id = "Maldives", Code = "MV" },
                        new { Id = "Mali", Code = "ML" },
                        new { Id = "Malta", Code = "MT" },
                        new { Id = "Marshall Islands", Code = "MH" },
                        new { Id = "Martinique", Code = "MQ" },
                        new { Id = "Mauritania", Code = "MR" },
                        new { Id = "Mauritius", Code = "MU" },
                        new { Id = "Mayotte", Code = "YT" },
                        new { Id = "Mexico", Code = "MX" },
                        new { Id = "Micronesia, Federated States of", Code = "FM" },
                        new { Id = "Moldova, Republic of", Code = "MD" },
                        new { Id = "Monaco", Code = "MC" },
                        new { Id = "Mongolia", Code = "MN" },
                        new { Id = "Montserrat", Code = "MS" },
                        new { Id = "Morocco", Code = "MA" },
                        new { Id = "Mozambique", Code = "MZ" },
                        new { Id = "Myanmar", Code = "MM" },
                        new { Id = "Namibia", Code = "NA" },
                        new { Id = "Nauru", Code = "NR" },
                        new { Id = "Nepal", Code = "NP" },
                        new { Id = "Netherlands", Code = "NL" },
                        new { Id = "Netherlands Antilles", Code = "AN" },
                        new { Id = "New Caledonia", Code = "NC" },
                        new { Id = "New Zealand", Code = "NZ" },
                        new { Id = "Nicaragua", Code = "NI" },
                        new { Id = "Niger", Code = "NE" },
                        new { Id = "Nigeria", Code = "NG" },
                        new { Id = "Niue", Code = "NU" },
                        new { Id = "Norfolk Island", Code = "NF" },
                        new { Id = "Northern Mariana Islands", Code = "MP" },
                        new { Id = "Norway", Code = "NO" },
                        new { Id = "Oman", Code = "OM" },
                        new { Id = "Pakistan", Code = "PK" },
                        new { Id = "Palau", Code = "PW" },
                        new { Id = "Palestinian Territory, Occupied", Code = "PS" },
                        new { Id = "Panama", Code = "PA" },
                        new { Id = "Papua New Guinea", Code = "PG" },
                        new { Id = "Paraguay", Code = "PY" },
                        new { Id = "Peru", Code = "PE" },
                        new { Id = "Philippines", Code = "PH" },
                        new { Id = "Pitcairn", Code = "PN" },
                        new { Id = "Poland", Code = "PL" },
                        new { Id = "Portugal", Code = "PT" },
                        new { Id = "Puerto Rico", Code = "PR" },
                        new { Id = "Qatar", Code = "QA" },
                        new { Id = "Reunion", Code = "RE" },
                        new { Id = "Romania", Code = "RO" },
                        new { Id = "Russian Federation", Code = "RU" },
                        new { Id = "RWANDA", Code = "RW" },
                        new { Id = "Saint Helena", Code = "SH" },
                        new { Id = "Saint Kitts and Nevis", Code = "KN" },
                        new { Id = "Saint Lucia", Code = "LC" },
                        new { Id = "Saint Pierre and Miquelon", Code = "PM" },
                        new { Id = "Saint Vincent and the Grenadines", Code = "VC" },
                        new { Id = "Samoa", Code = "WS" },
                        new { Id = "San Marino", Code = "SM" },
                        new { Id = "Sao Tome and Principe", Code = "ST" },
                        new { Id = "Saudi Arabia", Code = "SA" },
                        new { Id = "Senegal", Code = "SN" },
                        new { Id = "Serbia and Montenegro", Code = "CS" },
                        new { Id = "Seychelles", Code = "SC" },
                        new { Id = "Sierra Leone", Code = "SL" },
                        new { Id = "Singapore", Code = "SG" },
                        new { Id = "Slovakia", Code = "SK" },
                        new { Id = "Slovenia", Code = "SI" },
                        new { Id = "Solomon Islands", Code = "SB" },
                        new { Id = "Somalia", Code = "SO" },
                        new { Id = "South Africa", Code = "ZA" },
                        new { Id = "South Georgia and the South Sandwich Islands", Code = "GS" },
                        new { Id = "Spain", Code = "ES" },
                        new { Id = "Sri Lanka", Code = "LK" },
                        new { Id = "Sudan", Code = "SD" },
                        new { Id = "Suriid", Code = "SR" },
                        new { Id = "Svalbard and Jan Mayen", Code = "SJ" },
                        new { Id = "Swaziland", Code = "SZ" },
                        new { Id = "Sweden", Code = "SE" },
                        new { Id = "Switzerland", Code = "CH" },
                        new { Id = "Syrian Arab Republic", Code = "SY" },
                        new { Id = "Taiwan, Province of China", Code = "TW" },
                        new { Id = "Tajikistan", Code = "TJ" },
                        new { Id = "Tanzania, United Republic of", Code = "TZ" },
                        new { Id = "Thailand", Code = "TH" },
                        new { Id = "Timor-Leste", Code = "TL" },
                        new { Id = "Togo", Code = "TG" },
                        new { Id = "Tokelau", Code = "TK" },
                        new { Id = "Tonga", Code = "TO" },
                        new { Id = "Trinidad and Tobago", Code = "TT" },
                        new { Id = "Tunisia", Code = "TN" },
                        new { Id = "Turkey", Code = "TR" },
                        new { Id = "Turkmenistan", Code = "TM" },
                        new { Id = "Turks and Caicos Islands", Code = "TC" },
                        new { Id = "Tuvalu", Code = "TV" },
                        new { Id = "Uganda", Code = "UG" },
                        new { Id = "Ukraine", Code = "UA" },
                        new { Id = "United Arab Emirates", Code = "AE" },
                        new { Id = "United Kingdom", Code = "GB" },
                        new { Id = "United States", Code = "US" },
                        new { Id = "United States Minor Outlying Islands", Code = "UM" },
                        new { Id = "Uruguay", Code = "UY" },
                        new { Id = "Uzbekistan", Code = "UZ" },
                        new { Id = "Vanuatu", Code = "VU" },
                        new { Id = "Venezuela", Code = "VE" },
                        new { Id = "Viet Nam", Code = "VN" },
                        new { Id = "Virgin Islands, British", Code = "VG" },
                        new { Id = "Virgin Islands, U.S.", Code = "VI" },
                        new { Id = "Wallis and Futuna", Code = "WF" },
                        new { Id = "Western Sahara", Code = "EH" },
                        new { Id = "Yemen", Code = "YE" },
                        new { Id = "Zambia", Code = "ZM" },
                        new { Id = "Zimbabwe", Code = "ZW" }
                    );
                });

            modelBuilder.Entity("Mortgage.Domain.Lenders.Lender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AcceptInterestOnly");

                    b.Property<string>("Citizenship")
                        .IsRequired();

                    b.Property<string>("CriteriaUrl");

                    b.Property<bool>("FirstTimeBuyer");

                    b.Property<decimal>("InterestOnlyMaxLoanToValue");

                    b.Property<string>("LenderUrl");

                    b.Property<int>("MaximumAge");

                    b.Property<decimal>("MinimumIncome");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Notes");

                    b.Property<string>("RatesUrl");

                    b.HasKey("Id");

                    b.ToTable("Lenders");
                });

            modelBuilder.Entity("Mortgage.Domain.Lenders.LenderCountry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Allowed");

                    b.Property<Guid>("LenderId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LenderId");

                    b.ToTable("LenderCountry");
                });

            modelBuilder.Entity("Mortgage.Domain.Lenders.Lender", b =>
                {
                    b.OwnsOne("Mortgage.Domain.Lenders.NewProperty", "NewProperty", b1 =>
                        {
                            b1.Property<Guid?>("LenderId");

                            b1.Property<bool>("AcceptBuyToLet");

                            b1.Property<bool>("AcceptResidential");

                            b1.Property<decimal>("BuyToLetMaxLoanToValue");

                            b1.Property<int>("MaxNumberOfFloors");

                            b1.Property<decimal>("ResidentialMaxLoanToValue");

                            b1.ToTable("Lenders");

                            b1.HasOne("Mortgage.Domain.Lenders.Lender")
                                .WithOne("NewProperty")
                                .HasForeignKey("Mortgage.Domain.Lenders.NewProperty", "LenderId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Mortgage.Domain.Lenders.SelfEmployment", "SelfEmployment", b1 =>
                        {
                            b1.Property<Guid?>("LenderId");

                            b1.Property<bool>("Accept");

                            b1.Property<decimal>("MinimumIncome");

                            b1.Property<int>("YearsBooks");

                            b1.ToTable("Lenders");

                            b1.HasOne("Mortgage.Domain.Lenders.Lender")
                                .WithOne("SelfEmployment")
                                .HasForeignKey("Mortgage.Domain.Lenders.SelfEmployment", "LenderId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Mortgage.Domain.Lenders.UsedProperty", "UsedProperty", b1 =>
                        {
                            b1.Property<Guid?>("LenderId");

                            b1.Property<bool>("AcceptBuyToLet");

                            b1.Property<bool>("AcceptResidential");

                            b1.Property<decimal>("BuyToLetMaxLoanToValue");

                            b1.Property<bool>("HousingAndMultipleOccupancy");

                            b1.Property<int>("MaxNumberOfFloors");

                            b1.Property<decimal>("ResidentialMaxLoanToValue");

                            b1.ToTable("Lenders");

                            b1.HasOne("Mortgage.Domain.Lenders.Lender")
                                .WithOne("UsedProperty")
                                .HasForeignKey("Mortgage.Domain.Lenders.UsedProperty", "LenderId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Mortgage.Domain.Lenders.ContactInformation", "PrimaryContactInformation", b1 =>
                        {
                            b1.Property<Guid>("LenderId");

                            b1.Property<bool>("DirectLine");

                            b1.Property<string>("Name");

                            b1.Property<string>("PhoneNumber");

                            b1.ToTable("Lenders");

                            b1.HasOne("Mortgage.Domain.Lenders.Lender")
                                .WithOne("PrimaryContactInformation")
                                .HasForeignKey("Mortgage.Domain.Lenders.ContactInformation", "LenderId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Mortgage.Domain.Lenders.ContactInformation", "SecondaryContactInformation", b1 =>
                        {
                            b1.Property<Guid>("LenderId");

                            b1.Property<bool>("DirectLine");

                            b1.Property<string>("Name");

                            b1.Property<string>("PhoneNumber");

                            b1.ToTable("Lenders");

                            b1.HasOne("Mortgage.Domain.Lenders.Lender")
                                .WithOne("SecondaryContactInformation")
                                .HasForeignKey("Mortgage.Domain.Lenders.ContactInformation", "LenderId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Mortgage.Domain.Lenders.LenderCountry", b =>
                {
                    b.HasOne("Mortgage.Domain.Lenders.Lender", "Lender")
                        .WithMany("Countries")
                        .HasForeignKey("LenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
